# version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - LOGTAIL_TOKEN=${LOGTAIL_TOKEN}
      - LOGTAIL_ENDPOINT=${LOGTAIL_ENDPOINT}
      - API_PORT=${API_PORT}
      - API_DOMAIN=${API_DOMAIN}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_LOGGING=${DB_LOGGING}
      - DB_TYPEORM_SYNC=${DB_TYPEORM_SYNC}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    volumes:
      - .:/usr/src/app:cached
      - npm_modules:/usr/src/app/node_modules

  db:
    image: postgres:17.4-alpine3.21 
    container_name: nano-link-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  npm_modules:
